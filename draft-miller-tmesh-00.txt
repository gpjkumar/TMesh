


Network Working Group                                          J. Miller
Internet-Draft                                                  Filament
Intended status: Informational                              May 16, 2015
Expires: November 17, 2015


                  TMesh - Thing Mesh PHY/MAC Protocol
                         draft-miller-tmesh-00

Abstract

   A secure PHY/MAC based on telehash [1] designed for low-power sleepy
   devices.

Status of this Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at http://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on November 17, 2015.

Copyright Notice

   Copyright (c) 2015 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents
   (http://trustee.ietf.org/license-info) in effect on the date of
   publication of this document.  Please review these documents
   carefully, as they describe your rights and restrictions with respect
   to this document.  Code Components extracted from this document must
   include Simplified BSD License text as described in Section 4.e of
   the Trust Legal Provisions and are provided without warranty as
   described in the Simplified BSD License.






Miller                  Expires November 17, 2015               [Page 1]

Internet-Draft                    tmesh                         May 2015


Table of Contents

   1.  Introduction  . . . . . . . . . . . . . . . . . . . . . . . . . 3
     1.1.  The Need for Standards  . . . . . . . . . . . . . . . . . . 3
     1.2.  Telehash Native . . . . . . . . . . . . . . . . . . . . . . 4
     1.3.  Vocabulary  . . . . . . . . . . . . . . . . . . . . . . . . 4
     1.4.  Overview - PHY  . . . . . . . . . . . . . . . . . . . . . . 5
     1.5.  Overview - MAC  . . . . . . . . . . . . . . . . . . . . . . 5
   2.  Protocol Definition . . . . . . . . . . . . . . . . . . . . . . 6
     2.1.  Terminology . . . . . . . . . . . . . . . . . . . . . . . . 6
     2.2.  Notes . . . . . . . . . . . . . . . . . . . . . . . . . . . 6
     2.3.  Link Windows  . . . . . . . . . . . . . . . . . . . . . . . 7
     2.4.  Flow  . . . . . . . . . . . . . . . . . . . . . . . . . . . 7
   3.  Implementation Notes  . . . . . . . . . . . . . . . . . . . . . 8
   4.  Security Considerations . . . . . . . . . . . . . . . . . . . . 8
   5.  References  . . . . . . . . . . . . . . . . . . . . . . . . . . 8
   Appendix A.  Examples . . . . . . . . . . . . . . . . . . . . . . . 8
   Author's Address  . . . . . . . . . . . . . . . . . . . . . . . . . 8

































Miller                  Expires November 17, 2015               [Page 2]

Internet-Draft                    tmesh                         May 2015


1.  Introduction

   As embedded devices continue to increase in capabilities while
   falling in cost there is a growing challenge to manage their energy
   resources for wirelessly networking them together.  While there are
   many options for short-range 2.4GHz networks such as Bluetooth Smart
   (BLE), low-power WiFi, Zigbee and 802.15.4 based mesh networks, there
   are few choices for long-range sub-GHz networking.

   TMesh builds on the strong end-to-end encryption and privacy
   capabilities of [telehash v3] by adding a uniquely matched Physical
   RF and Media Access Control protocol.

   The key attributes of TMesh are:

   o  high density - thousands per square mile

   o  very low power - years on common batteries

   o  wide area - optimized for long-range capable radios

   o  high lateny - low duty cycle, 10s of seconds of sleep

   o  peer aware meshing - does not require special purpose coordinator
      motes

   o  high interference resiliency - bi-modal PHY to maximize
      connectivity in all conditions

   o  dynamically resource optimized - powered motes naturally provide
      more assistance

   o  no identity on the air - same absolute privacy and security
      principles as telehash

1.1.  The Need for Standards

   The existing best choices are all either only partial solutions like
   802.15.4, require membership to participate like LoRaWAN and ZigBee,
   or are focused on specific verticals like DASH7 and Wireless M-BUS.

   All other options only provide incomplete or indadequate security and
   privacy, most use only optional AES-128 and often with complicated or
   fixed provisioning-based key management.  No existing option attempts
   to protect the mote identity and network metadata from monitoring.






Miller                  Expires November 17, 2015               [Page 3]

Internet-Draft                    tmesh                         May 2015


1.2.  Telehash Native

   By leveraging telehash [1] as the native encryption and mote identity
   platform, TMesh can start with some strong assumptions:

   o  each mote will have a unique stable 32-byte identity, the hashname

   o  two linked motes will have a unique long-lived session id, the
      routing token

   o  all payloads will be encrypted ciphertext

   o  retransmissions and acknowledgements happen at a higher level and
      are not required

   o  motes are members of a private mesh and only communicate with
      other verified members

   o  telehash defines a useful "EVEN" and "ODD" ordering relationship
      between two motes

1.3.  Vocabulary

   o  "mote"

   o  "knock"

   o  "hard knock"

   o  "soft knock"

   o  "EVEN" / "ODD"

   o  "window"

   o  "window sequence"

   o  "epoch"

   o  "encoder"

   o  "neighborhood"

   o  "Z"

   o  "leader"





Miller                  Expires November 17, 2015               [Page 4]

Internet-Draft                    tmesh                         May 2015


   o  "lost"

1.4.  Overview - PHY

   All radio PHY operations are bi-modal, with a "hard knock" and a
   "soft knock".  Each "knock" is a single private transmission from one
   mote to another using an established telehash link.  The "knock"
   itself is always in two distinct parts, a single boolean notification
   followed by a short delay and then the full payload transmission.

   The "hard knock" is designed for maximum range and is not optimized
   for energy efficiency, it is the fallback mode after any "soft knock"
   has timed out.

   The "soft knock" is designed to take advantage of a transceiver's
   most efficient modes and capabilities, always minimizing the energy
   required to transmit.

   Transmitted payloads do not need whitening as encrypted packets are
   inherently DC-free.  They also do not need CRC as all packets have
   authentication bytes included.

   Channel frequency definitions are unique to each link and derived
   from the link's routing token.  The "window sequence" for each knock
   will do one full rotation per "epoch", where at least one knock was
   required from each mote during for it to be valid and start over.

   There are multiple "knock encoders" defined that specify how each
   knock is actually transmitted via RF depending on the transceiver
   hardware's capabilities.  These range from highly compatible ones
   such as ASK, commonly available ones like GFSK, and more advanced/
   vendor-specific ones such as LoRa.  A mote advertises the encoders it
   supports as a telehash path.

   Each encoder also specifies the knock "window" length, which is 2x
   the minimum amount of time for a transceiver to transition between
   transmit and receive and determines the maximum allowable oscillator
   drift between epochs.

1.5.  Overview - MAC

   To operate as a mesh network, each mote maintains a list of its radio
   neighbors and shares that list with each of them for discovery.  This
   list is called a mote's "neighborhood" and contains mostly soft-knock
   neighbors with a few hard-knock only neighbors to maximize
   connectivity.

   Every mote calculates its own "Z" index, a uint8_t value that



Miller                  Expires November 17, 2015               [Page 5]

Internet-Draft                    tmesh                         May 2015


   represents the resources it has available to assist with the mesh.
   It will vary based on the battery level or fixed power, as well as if
   the mote has greater network access (is an internet bridge) or is
   well located (based on configuration).

   The mote with the highest "Z" in any neighborhood is known as the
   "local leader".


2.  Protocol Definition

2.1.  Terminology

   In this document, the key words "MUST", "MUST NOT", "REQUIRED",
   "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY",
   and "OPTIONAL" are to be interpreted as described in BCP 14, [RFC
   2119] and indicate requirement levels for compliant TMesh
   implementations.

2.2.  Notes

   o  try to keep soft/hard neighbor lists minimum but reliable, quiesce
      shrinks size of each

   o  send packet for a mote directly to it, and then fallback to one
      known neighbor, then to the local leader

   o  any hard knock handshake must also be repeated as a soft knock

   o  lost mode is when all link state is lost or all epochs expired,
      local leaders must help by sending handshake knocks on a common
      encoder-defined channel for them to resync

      *  begin listening for any hard knock handshakes, generate link id
         and sync to it then handshake there

      *  if sleepy, only listen on the lost schedule

      *  local leaders are required to hard knock per epoch on the lost
         schedule

   o  resource based routing, highest resource gets undelivered packets

   o  highest leader for the whole mesh is responsible for mapping the
      full mesh, collecting undelivered's and re-routing them

   o  natural pooling around local resources, neighborhoods




Miller                  Expires November 17, 2015               [Page 6]

Internet-Draft                    tmesh                         May 2015


   o  when you know a link's neighbors you can calculate their knock
      windows and detect an unused one to transmit in instead of waiting
      for yours

2.3.  Link Windows

   o  link ids determine window sequence pattern

   o  step through each bit of the id

      *  derive unique soft/hard knock parameters

      *  derive time until next window (variable)

      *  each pass through the full id is called an "epoch"

   o  a confirmed knock over any link is a sync, know the current bit
      the sender is on for all their links

   o  can use a neighbors window if no soft knock is detected

   o  sleepy motes calculate the epoch peak density across all their
      neighbors and only wake then

      *  knocks are only tried twice outside of that peak, and once
         again inside

   o  calculate neighbor windows to detect conflicts and avoid
      overlapping

2.4.  Flow

   1.  mote must be initially paired to another

       *  handshakes

       *  z-index priority set

       *  link established

       *  link id created (routing token and z-index byte?)

   2.  existing mote informs mesh of new link

       *  sends to mesh leader for overall routing

       *  if link is a neighbor, updates other neighbors




Miller                  Expires November 17, 2015               [Page 7]

Internet-Draft                    tmesh                         May 2015


   3.  existing mote shares mesh to new mote

       *  sends its neighborhood

       *  sends the mesh top leader list

   4.  new mote attempts to reach neighbors to establish links

   5.  build/maintain neighborhood list of X soft and Y hard knock

   6.  each mote sends its neighborhood to each neighbor after it's
       changed since the last epoch

   7.  a neighbor is only considered lost after it has not responded to
       a full epoch


3.  Implementation Notes


4.  Security Considerations


5.  References

URIs

   [1]  <http://telehash.org>


Appendix A.  Examples

   This appendix provides some examples of the tmesh protocol operation.

                                   Request:


                                   Response:













Miller                  Expires November 17, 2015               [Page 8]

Internet-Draft                    tmesh                         May 2015


Author's Address

   Jeremie Miller
   Filament
   Denver


   Email: jeremie@jabber.org
   URI:










































Miller                  Expires November 17, 2015               [Page 9]

