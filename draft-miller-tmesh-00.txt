


Network Working Group                                          J. Miller
Internet-Draft                                                  Filament
Intended status: Informational                              May 16, 2015
Expires: November 17, 2015


                  TMesh - Thing Mesh PHY/MAC Protocol
                         draft-miller-tmesh-00

Abstract

   A secure PHY/MAC based on telehash [1] designed for low-power sleepy
   devices.

Status of this Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at http://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on November 17, 2015.

Copyright Notice

   Copyright (c) 2015 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents
   (http://trustee.ietf.org/license-info) in effect on the date of
   publication of this document.  Please review these documents
   carefully, as they describe your rights and restrictions with respect
   to this document.  Code Components extracted from this document must
   include Simplified BSD License text as described in Section 4.e of
   the Trust Legal Provisions and are provided without warranty as
   described in the Simplified BSD License.






Miller                  Expires November 17, 2015               [Page 1]

Internet-Draft                    tmesh                         May 2015


Table of Contents

   1.  Introduction . . . . . . . . . . . . . . . . . . . . . . . . .  3
     1.1.  The Need for Standards . . . . . . . . . . . . . . . . . .  3
     1.2.  Telehash Native  . . . . . . . . . . . . . . . . . . . . .  4
     1.3.  Vocabulary . . . . . . . . . . . . . . . . . . . . . . . .  4
     1.4.  Overview . . . . . . . . . . . . . . . . . . . . . . . . .  5
       1.4.1.  PHY  . . . . . . . . . . . . . . . . . . . . . . . . .  5
       1.4.2.  MAC  . . . . . . . . . . . . . . . . . . . . . . . . .  6
       1.4.3.  Mesh . . . . . . . . . . . . . . . . . . . . . . . . .  7
   2.  Protocol Definition  . . . . . . . . . . . . . . . . . . . . .  7
     2.1.  Terminology  . . . . . . . . . . . . . . . . . . . . . . .  7
     2.2.  PHY  . . . . . . . . . . . . . . . . . . . . . . . . . . .  7
       2.2.1.  Private Hopping Sequence . . . . . . . . . . . . . . .  7
       2.2.2.  Medium Types . . . . . . . . . . . . . . . . . . . . .  8
     2.3.  MAC  . . . . . . . . . . . . . . . . . . . . . . . . . . . 10
       2.3.1.  Encrypted Knock Payload  . . . . . . . . . . . . . . . 10
       2.3.2.  Epochs . . . . . . . . . . . . . . . . . . . . . . . . 10
     2.4.  Mesh . . . . . . . . . . . . . . . . . . . . . . . . . . . 11
       2.4.1.  z-index  . . . . . . . . . . . . . . . . . . . . . . . 11
       2.4.2.  Neighbors  . . . . . . . . . . . . . . . . . . . . . . 12
       2.4.3.  Communities  . . . . . . . . . . . . . . . . . . . . . 12
       2.4.4.  Optimizations  . . . . . . . . . . . . . . . . . . . . 14
   3.  Implementation Notes . . . . . . . . . . . . . . . . . . . . . 14
   4.  Security Considerations  . . . . . . . . . . . . . . . . . . . 14
   5.  References . . . . . . . . . . . . . . . . . . . . . . . . . . 14
   Appendix A.  Examples  . . . . . . . . . . . . . . . . . . . . . . 15
   Author's Address . . . . . . . . . . . . . . . . . . . . . . . . . 15























Miller                  Expires November 17, 2015               [Page 2]

Internet-Draft                    tmesh                         May 2015


1.  Introduction

      this is a work in progress and under active development, expect
      significant breaking changes

   As embedded devices continue to increase in capabilities while
   falling in cost there is a growing challenge to manage their energy
   resources for wirelessly networking them together.  While there are
   many options for short-range 2.4GHz networks such as Bluetooth Smart
   (BLE), low-power WiFi, Zigbee and 802.15.4 based mesh networks, there
   are few choices for long-range sub-GHz mesh networking.

   TMesh builds on the strong end-to-end encryption and privacy
   capabilities of [telehash v3] by adding a uniquely matched secure
   Physical RF and Media Access Control protocol.

   The key attributes of TMesh are:

   o  high density - thousands per square kilometer

   o  very low power - years on coin cell batteries

   o  wide area - optimized for long-range (>1km) capable radios

   o  high latency - low minimum duty cycle from seconds to minutes

   o  peer aware meshing - does not require dedicated coordinator
      hardware

   o  high interference resiliency - bi-modal PHY to maximize
      connectivity in all conditions

   o  dynamically resource optimized - powered motes naturally provide
      more routing assistance

   o  zero metadata broadcast - same absolute privacy and security
      principles as telehash

   o  dynamic spectrum - able to use any specialized private or
      regionally licensed bands

1.1.  The Need for Standards

   The existing best choices are all either only partial solutions like
   802.15.4, require membership to participate like LoRaWAN, ZigBee, and
   Z-Wave, or are focused on specific verticals like DASH7 and Wireless
   M-Bus.




Miller                  Expires November 17, 2015               [Page 3]

Internet-Draft                    tmesh                         May 2015


   All other options only provide incomplete or indadequate security and
   privacy, most use only optional AES-128 and often with complicated or
   fixed provisioning-based key management.  No existing option fully
   protects the mote identity and network metadata from monitoring.

1.2.  Telehash Native

   By leveraging telehash [1] as the native encryption and mote identity
   platform, TMesh can start with some strong assumptions:

   o  each mote will have a unique stable 32-byte identity, the hashname

   o  two linked motes will have a unique long-lived session id, the
      routing token

   o  all payloads will be encrypted ciphertext with forward secrecy

   o  retransmissions and acknowledgements happen at a higher level and
      are not required in the framing

   o  motes are members of a private mesh and only communicate with
      other verified members

   o  chunked encoding defines how to serialize variable length packets
      into fixed transmission frames

1.3.  Vocabulary

   o  "mote" - a single physical transmitting/receiving device

   o  "medium" - definition of the specific channels/settings the
      physical transceivers use

   o  "knock" - a single transmission

   o  "window" - the period for a knock, 2^22 microseconds (~4.2
      seconds)

   o  "window sequence" - each window will change frequency/channels in
      a sequence

   o  "epoch" - one unique set of window sequences, derived from a
      medium and a secret

   o  "community" - a network of motes using a common medium to create a
      large area mesh





Miller                  Expires November 17, 2015               [Page 4]

Internet-Draft                    tmesh                         May 2015


   o  "neighbors" - nearby reachable motes in the same community

   o  "z-index" - the self-asserted resource level (priority) from any
      mote

   o  "leader" - the highest z-index mote in any set of neighbors

1.4.  Overview

   TMesh is the composite of three distinct layers, the physical radio
   medium encoding (PHY), the shared management of the spectrum (MAC),
   and the networking relationships between 2 or more motes (Mesh).

   Common across all of these is the concept of an "epoch", which is a
   generated set of unique window sequences shared between two motes in
   one "medium".  A "window" is where one "knock" can occur from one
   mote to another unique to that window and epoch.  A "knock" is the
   transmission of a 64 byte fixed frame of payload, plus any medium-
   specific overhead (preamble).

   Each epoch is the smallest divisible unit of bandwidth and is only
   capable of a max throughput of 120 bits per second average,
   approximately 1 kilobyte per minute.  Every mote has at least one
   receiving epoch and one sending epoch per link to another mote, and
   will typically have multiple epochs with other motes to increase the
   overall bandwidth capacity and minimize latency.

   The number and types of epochs available depend entirely on the
   current energy budget, every epoch type has a fixed minimum energy
   cost per window to send/receive based on the medium definition.

   A community is any set of motes that are using a common medium
   definition and have enough trust to establish a telehash link for
   sharing peer motes and act as a router to facilitate larger scale
   meshing.  Within any community, the motes that can directly
   communicate over an epoch are called neighbors, and any neighbor that
   has a higher z-index is always considered the current leader and may
   have additional responsibilities.

1.4.1.  PHY

   A "medium" is defined by 5 bytes that specify the PHY type and exact
   encoding details.  The 5 bytes are always string encoded as 8 base32
   characters for ease of use in JSON and configuration storage.

   The first byte is the primary "type" that determines if the medium is
   for a public or private community and the overall category of PHY
   encoding technique to use.  The first/high bit of 0 (byte values from



Miller                  Expires November 17, 2015               [Page 5]

Internet-Draft                    tmesh                         May 2015


   0-127) is for public communities, and a bit of 1 (values from 128-
   255) is for private ones.  The other bits in the "type" map directly
   to different PHY modes on transceivers or different drivers entirely.

   Each PHY driver uses the second through fifth medium bytes to
   determine the power, frequency range, number of channels, spreading,
   bitrate, error correction usage, regulatory requirements, channel
   dwell time, etc details on the transmission/reception.  The dynamic
   channel frequency hopping and transmission window timing are derived
   from the full epoch and not included in the medium.

   Transmitted payloads do not need whitening as encrypted packets are
   by nature DC-free.  They also do not explicitly require CRC as all
   telehash packets have authentication bytes included for integrity
   verification.

   A single fixed 64 byte payload is transmitted during each window in
   an epoch, this is called a "knock".  If the un-encrypted payload does
   not fill the full 64 byte frame the remaining bytes must contain
   additional data so as to not reveal the actual payload size.

      WIP - determine a standard filler data format that will add
      additional dynamically sized error correction, explore taking
      advantage of the fact that the inner and outer bitstreams are
      encrypted and bias-free (Gaussian distribution divergence?), the
      last byte should always duplicate the first/length to ensure
      differentiation between payload/filler

1.4.2.  MAC

   There is no mote addressing or other metadata included in the
   transmitted bytes, including there being no framing outside of the
   encrypted ciphertext in a knock.  The uniqueness of each epoch's
   timing and PHY encoding is the only mote addressing mechanism.

   Every epoch is a unique individual encrypted session between the two
   motes, with a shared secret key derived directly from the medium and
   other sources, and nonce based on the current window sequence.  All
   payloads are encrypted with the ChaCha20 cipher [2] before
   transmission regardless of if they are already encrypted via
   telehash.

   Each mote should actively make use of multiple epochs to another mote
   and regularly include more efficient options to optimize the overall
   energy usage.  Every mote advertises their current energy resource
   level as a "z-index" as an additional mesh optimization strategy.





Miller                  Expires November 17, 2015               [Page 6]

Internet-Draft                    tmesh                         May 2015


1.4.3.  Mesh

   There is two mechanisms used for enabling a larger scale mesh network
   with TMesh, "communities" (MAC layer) and "routers" (telehash/app
   layer).

   A "community" is defined by motes using a shared medium and the
   automatic sharing of other neighboring motes that it has active
   epochs with in that medium.  Each neighbor mote hashname is listed
   along with time offset, last activity, z-index, and the signal
   strength.  A mote may be part of more than one community but does not
   share neighbor mote information outside of each one.

   The "leader" is always the neighbor with the highest z-index
   reachable directly, the mote with the most resources.  The leader
   inherits the responsibility to monitor each neighbor's neighbors for
   other leaders and establish direct or bridged links with them.

   Any mote attempting to connect to a non-local hashname will use their
   leader as the telehash router and send it a peer request, whom will
   forward it to the next highest leader it is connected to until it
   reaches the highest in the community.  That highest resourced leader
   is responsible for maintaining an index of the available motes in the
   community.

   Any mote that can provide reliable bridged connectivity to another
   network (wifi, ethernet, etc) should have a higher z-index and may
   also forward the peer request to additional telehash router(s) in the
   mesh via those networks.


2.  Protocol Definition

2.1.  Terminology

   In this document, the key words "MUST", "MUST NOT", "REQUIRED",
   "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY",
   and "OPTIONAL" are to be interpreted as described in BCP 14, [RFC
   2119] and indicate requirement levels for compliant TMesh
   implementations.

2.2.  PHY

2.2.1.  Private Hopping Sequence

   Most PHY encodings require specific synchronized channel and timing
   inputs, these are generated from the epoch's 32 byte secret via a
   consistent transformation.



Miller                  Expires November 17, 2015               [Page 7]

Internet-Draft                    tmesh                         May 2015


   An eight byte null/zero pad is encrypted with the current epoch
   secret/nonce for each window and the ciphertext result is used for
   channel selection and window timing.

   The first two bytes of the ciphertext result is used for channel
   selection as a network order unsigned short integer.  The 2^16 total
   possible channels are simply mod'd to the number of usable channels
   based on the current medium.  If there are 50 channels, it would be
   "channel = ((uint16_t)pad) % 50".

   The next four bytes (32 bits) are used as the window microsecond
   offset timing source as a network order unsigned long integer.  Each
   window is up to 2^22 microseconds, but every medium will have a fixed
   amount of time it takes to send or receive within that window and
   that is first subtracted from the total possible microseconds.  The
   remaining microsecond offset start times are mod'd to get the exact
   offset for that window.

2.2.2.  Medium Types

   Medium "type" byte table:

                        +------------+-----------+
                        |    Bit 7   | Community |
                        +------------+-----------+
                        | 0b0xxxxxxx |   Public  |
                        | 0b1xxxxxxx |  Private  |
                        +------------+-----------+

                         +------------+----------+
                         |  Bits 6-0  | Encoding |
                         +------------+----------+
                         | 0bx0000000 | Reserved |
                         | 0bx0000001 |    OOK   |
                         | 0bx0000010 |  (G)FSK  |
                         | 0bx0000011 |   LoRa   |
                         | 0bx0000100 |  (O)QPSK |
                         +------------+----------+

2.2.2.1.  OOK

      TBD

2.2.2.2.  (G)FSK

      TBD





Miller                  Expires November 17, 2015               [Page 8]

Internet-Draft                    tmesh                         May 2015


2.2.2.3.  LoRa

   Epoch Header

   o  byte 2 - transmitting energy mA

   o  byte 3 - standard frequency range (see table)

   o  byte 4 - Bw & CodingRate (RegModemConfig 1)

   o  byte 5 - SpreadingFactor (RegModemConfig 2)

   All preambles are set to the minimum size of 6.

   LoRa is used in implicit header mode with a fixed size of 64.

   Freq Table:

        +--------+-----+------+----------+-----------------+------+
        | Region | Low | High | mW (erp) |       Reg       |  ID  |
        +--------+-----+------+----------+-----------------+------+
        |   US   | 902 |  928 |    100   | FCC part 15.247 | 0x01 |
        |   EU   | 863 |  870 |          | ETSI EN 300-220 | 0x02 |
        |  Japan | 915 |  930 |          |    ARIB T-108   | 0x03 |
        |  China | 779 |  787 |    10    |       SRRC      | 0x04 |
        +--------+-----+------+----------+-----------------+------+

   In the US region 0x01 to reach maximum transmit power each window may
   not transmit on a channel for more than 400ms, when that limit is
   reached a new channel must be derived from the epoch (TBD) and hopped
   to.  See App Note [3].

   Notes on ranges:

   o  SRRC [4]

   o  Z-Wave [5]

   o  Atmel [6]

2.2.2.4.  (O)QPSK

      TBD








Miller                  Expires November 17, 2015               [Page 9]

Internet-Draft                    tmesh                         May 2015


2.3.  MAC

2.3.1.  Encrypted Knock Payload

   A unique 32 byte secret must be derived for every epoch and include
   the medium definition.  The 32 bytes are the binary digest output of
   multiple SHA-256 calculations of source data from the community and
   hashnames.  The first digest is generated from the medium (5 bytes),
   that output is combined with the community name (string) for a second
   digest.

   For public communities this second digest is the secret for the
   "PING" epoch that is shared and known by all members.  For private
   communities it is combined with a member's hashname (32 bytes) for a
   final digest that is the secret for the "PING" epoch unique to each
   member.  With direct communities the other member's hashname is also
   combined and a final (fourth) digest is the secret unique to that
   community and pair of members.

   The nonce input is always the epoch's current window sequence encoded
   as a network order unsigned double integer ("uint64_t") 8 bytes.
   This provides an additional guarantee against replay or delay attacks
   as the ciphertext is invalid outside of a window.

2.3.2.  Epochs

   While all epochs are the same construct of a medium, secret, window
   sequence, and tx/rx knocks, the context in how they're used may vary:

   o  "PING" - used as a timing source signal, only sequence 0

   o  "ECHO" - a response to a PING, is the one-time creation seed of a
      "PAIR", only sequence 1

   o  "PAIR" - only used to send initial handshakes to establish a new
      link

   o  "LINK" - encrypted telehash channel packets for an established
      link

2.3.2.1.  PING

   A "PING" epoch is only used as a transmission timing signal on window
   sequence "0".  The payload is not used to send/receive any content
   and is only deciphered as a source to generate an "ECHO".

   When two motes have a shared secret to create this type of epoch they
   can then use available energy to listen for a "PING" knock at any



Miller                  Expires November 17, 2015              [Page 10]

Internet-Draft                    tmesh                         May 2015


   time on the given channel for sequence "0".  When detected, the
   relevant "ECHO" can be generated and sent/received in the next window
   relative to the "PING" knock.

2.3.2.2.  ECHO

   An "ECHO" epoch is the one-time response to a detected "PING" knock
   and only exists to assist with the establishment of ephemeral "PAIR"
   epochs for the handshaking process.

   The secret for an "ECHO" epoch is derived from the medium and the
   deciphered payload of the "PING".  For public communities the payload
   of a transmitted "PING" must be used as another source, whereas in a
   private community the receiving mote's hashname is the additional
   source to generate the secret.

   The single "ECHO" knock is always set to window sequence "1" relative
   to the received "PING" at sequence "0".

   The payload is a pair of new ephemeral "PAIR" secrets, one for tx and
   one for rx.

2.3.2.3.  PAIR

   A pair of temporary "PAIR" epochs follow an "ECHO" and are only used
   to send/receive chunk-encoded handshakes to establish a telehash
   link.

   Once the link is established the corresponding "LINK" epochs for the
   given community and hashnames are initialized using the same time
   base as the original "PING" and begin at the correct window sequences
   based on that.

2.3.2.4.  LINK

   All "LINK" epochs follow a successful "PAIR" or are triggered by an
   out-of-band synchronization, their secret, medium, and time base are
   a result of those processes.

   All "LINK" knocks are chunk-encoded encrypted telehash channel
   packets without the routing token prefixed.

2.4.  Mesh

2.4.1.  z-index

   Every mote calculates its own "z-index", a uint8_t value that
   represents the resources it has available to assist with the mesh.



Miller                  Expires November 17, 2015              [Page 11]

Internet-Draft                    tmesh                         May 2015


   It will vary based on the battery level or fixed power, as well as if
   the mote has greater network access (is an internet bridge) or is
   well located (based on configuration).

   The z-index also serves as a window mask for all of that mote's
   receiving epoch windows by powers of two (128+ is all windows, 64-127
   is half the windows, etc).  This enables motes to greatly reduce the
   time required waking and listening for low power and high latency
   applications.

2.4.2.  Neighbors

   Each mote should share enough detail about its active neighbors with
   every neighbor so that a neighborhood map can be maintained.  This
   includes the relative sync time of each community epoch such that a
   neighbor can predict when a mote will be listening or may be
   transmitting to another nearby mote.

2.4.3.  Communities

      Describe communities and routing in more detail, and routers
      performing ongoing sync-mode duties.

   A community is defined as a single medium and a string name, both of
   which must be known to join that community.  They are the primary
   mechanism to manage and organize motes based on available spectrum
   and energy, where each community is bound to a single medium with
   predictable energy usage and available capacity.

   Any mesh may make use of multiple communities to optimize the overall
   availability and reliability, but different communities are not a
   trust or secure grouping mechanism, the medium and name are not
   considered secrets.

2.4.3.1.  Private Community

   A private community is not visible to any non-member, other than
   randomly timed knock transmissions on random channels there is no
   decodeable signals detectable to any third party, it is a dark mesh
   network that can only be joined via out of band coordination and
   explicit mesh membership trust.

   In order for any mote to join a private community it must first have
   at a minimum the community name, the hashname of one or more of the
   current leaders of that community, and the medium on which it is
   operating.

   It must also have either it's own hashname independently added as a



Miller                  Expires November 17, 2015              [Page 12]

Internet-Draft                    tmesh                         May 2015


   trusted member to the leader(s), or have a handshake that will verify
   its mesh membership and be accepted by a leader.

   The three sources of a hashname (32 bytes), the medium (5 bytes), and
   community name (string) are combined in that order and the SHA-256
   digest is generated as the secret for the "PING" epoch. and listen
   for a knock in that epoch.  This takes advantage of the fact that the
   community medium is divided into the same set of channels, such that
   every "PING" epoch will have some overlap with other community epochs
   that a mote is transmitting on.  When any mote sends any knock that
   happens to be on the same channel as one of their "PING" epoch's
   (sequence 0), they should then attempt to receive an "ECHO" knock
   exactly one window period after the transmission.

   The local leader should attempt to maximize their use of their own
   "PING" epoch overlapping channels to allow for fast resynchronization
   to them, even to the point of sending arbitrary/random knocks on that
   channel if nothing has been transmitted recently and continuously
   listening for any other knocks there if resources are available.
   When a mote detects that it is disconnected from the private
   community it should also send regular knocks on the sync epoch
   channels of last-known nearby motes.

2.4.3.2.  Public Community

   A public community is inherently visibile to any mote and should only
   be used for well-known or shared open services where the existince of
   the motes in the community is not private.  Any third party will be
   able to monitor participation in a public community, so they should
   be used minimally and only with ephemeral generated hashnames when
   possible.

   The public community is defined only by the common medium and name,
   where the secret is the SHA-256 digest of the medium (5 bytes) and
   the name string.  These are the inputs to create a "PING" epoch that
   a joining mote must both listen for and repeatedly transmit knocks on
   until an "ECHO" is received.  Since they will both be using the same
   medium channel, if possible a mote should first listen for a
   transmission in progress before sending another knock to minimize
   interference.

   The "PING" knocks must always have a random 64 byte payload so that
   even if the secret is known, it is not possible for a third party to
   determine if the knock was a "PING" or not.

   Once one "PING" knock has been both sent and received the mote may
   then derive an "ECHO" epoch and send a knock on it and listen for
   other "ECHO" knocks.



Miller                  Expires November 17, 2015              [Page 13]

Internet-Draft                    tmesh                         May 2015


   Upon receiving any "ECHO" knock the mote should immediately create
   the "PAIR" epochs and begin sending/receiving a single _unencrypted_
   handshake to bootstrap, and then encrypted handshakes until a "LINK"
   epoch is established for the public community.

   This functionality should not be enabled/deployed by default, it
   should only be used when management policy explicitly requires it for
   special/public use cases or temporary pairing/provisioning setup.

2.4.4.  Optimizations

   Since a community includes the automated sharing the time offsets of
   neighbors, any mote can then calculate keep-out channels/timing of
   other motes based on their shared community epochs and optimize the
   overall medium usage.  In this way, the community epochs act as a
   higher QoS path between motes, but reduce the privacy of
   transmissions by informing the neighbors of the windows.


3.  Implementation Notes

   o  if a packet chunk is incomplete in one window, prioritize
      subsequent windows from that mote

   o  prioritize different communities based on their energy
      performance, test more efficient ones dynamically


4.  Security Considerations


5.  References

URIs

   [1]  <http://telehash.org>

   [2]  <http://cr.yp.to/chacha.html>

   [3]  <https://www.semtech.com/images/promo/
        FCC_Part15_regulations_Semtech.pdf>

   [4]  <http://www.srrccn.org/srrc-approval-new2.htm>

   [5]  <http://image.slidesharecdn.com/
        smarthometechshort-13304126815608-phpapp01-120228010616-
        phpapp01/95/smart-home-tech-short-14-728.jpg>




Miller                  Expires November 17, 2015              [Page 14]

Internet-Draft                    tmesh                         May 2015


   [6]  <http://blog.atmel.com/2013/04/23/
        praise-the-lord-a-new-sub-1ghz-rf-transceiver-supporting-4-
        major-regional-frequency-bands/>


Appendix A.  Examples

   This appendix provides some examples of the tmesh protocol operation.

                                   Request:


                                   Response:



Author's Address

   Jeremie Miller
   Filament
   Denver


   Email: jeremie@jabber.org
   URI:


























Miller                  Expires November 17, 2015              [Page 15]

