


Network Working Group                                          J. Miller
Internet-Draft                                                  Filament
Intended status: Informational                              May 16, 2015
Expires: November 17, 2015


                  TMesh - Thing Mesh PHY/MAC Protocol
                         draft-miller-tmesh-00

Abstract

   A secure PHY/MAC based on telehash [1] designed for low-power sleepy
   devices.

Status of this Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at http://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on November 17, 2015.

Copyright Notice

   Copyright (c) 2015 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents
   (http://trustee.ietf.org/license-info) in effect on the date of
   publication of this document.  Please review these documents
   carefully, as they describe your rights and restrictions with respect
   to this document.  Code Components extracted from this document must
   include Simplified BSD License text as described in Section 4.e of
   the Trust Legal Provisions and are provided without warranty as
   described in the Simplified BSD License.






Miller                  Expires November 17, 2015               [Page 1]

Internet-Draft                    tmesh                         May 2015


Table of Contents

   1.  Introduction  . . . . . . . . . . . . . . . . . . . . . . . . . 3
     1.1.  The Need for Standards  . . . . . . . . . . . . . . . . . . 3
     1.2.  Telehash Native . . . . . . . . . . . . . . . . . . . . . . 4
     1.3.  Vocabulary  . . . . . . . . . . . . . . . . . . . . . . . . 4
     1.4.  Overview  . . . . . . . . . . . . . . . . . . . . . . . . . 4
       1.4.1.  PHY . . . . . . . . . . . . . . . . . . . . . . . . . . 5
       1.4.2.  MAC . . . . . . . . . . . . . . . . . . . . . . . . . . 5
       1.4.3.  Mesh  . . . . . . . . . . . . . . . . . . . . . . . . . 6
   2.  Protocol Definition . . . . . . . . . . . . . . . . . . . . . . 6
     2.1.  Terminology . . . . . . . . . . . . . . . . . . . . . . . . 6
     2.2.  PHY . . . . . . . . . . . . . . . . . . . . . . . . . . . . 6
       2.2.1.  OOK . . . . . . . . . . . . . . . . . . . . . . . . . . 7
       2.2.2.  (G)FSK  . . . . . . . . . . . . . . . . . . . . . . . . 7
       2.2.3.  LoRa  . . . . . . . . . . . . . . . . . . . . . . . . . 7
     2.3.  MAC . . . . . . . . . . . . . . . . . . . . . . . . . . . . 7
       2.3.1.  Lost Mode . . . . . . . . . . . . . . . . . . . . . . . 7
     2.4.  Mesh  . . . . . . . . . . . . . . . . . . . . . . . . . . . 7
       2.4.1.  z-index . . . . . . . . . . . . . . . . . . . . . . . . 8
     2.5.  Notes . . . . . . . . . . . . . . . . . . . . . . . . . . . 8
   3.  Implementation Notes  . . . . . . . . . . . . . . . . . . . . . 8
   4.  Security Considerations . . . . . . . . . . . . . . . . . . . . 8
   5.  References  . . . . . . . . . . . . . . . . . . . . . . . . . . 8
   Appendix A.  Examples . . . . . . . . . . . . . . . . . . . . . . . 9
   Author's Address  . . . . . . . . . . . . . . . . . . . . . . . . . 9

























Miller                  Expires November 17, 2015               [Page 2]

Internet-Draft                    tmesh                         May 2015


1.  Introduction

   As embedded devices continue to increase in capabilities while
   falling in cost there is a growing challenge to manage their energy
   resources for wirelessly networking them together.  While there are
   many options for short-range 2.4GHz networks such as Bluetooth Smart
   (BLE), low-power WiFi, Zigbee and 802.15.4 based mesh networks, there
   are few choices for long-range sub-GHz networking.

   TMesh builds on the strong end-to-end encryption and privacy
   capabilities of [telehash v3] by adding a uniquely matched Physical
   RF and Media Access Control protocol.

   The key attributes of TMesh are:

   o  high density - thousands per square mile

   o  very low power - years on common batteries

   o  wide area - optimized for long-range capable radios

   o  high lateny - low duty cycle, 10s of seconds of sleep

   o  peer aware meshing - does not require special purpose coordinator
      motes

   o  high interference resiliency - bi-modal PHY to maximize
      connectivity in all conditions

   o  dynamically resource optimized - powered motes naturally provide
      more assistance

   o  no identity on the air - same absolute privacy and security
      principles as telehash

1.1.  The Need for Standards

   The existing best choices are all either only partial solutions like
   802.15.4, require membership to participate like LoRaWAN and ZigBee,
   or are focused on specific verticals like DASH7 and Wireless M-BUS.

   All other options only provide incomplete or indadequate security and
   privacy, most use only optional AES-128 and often with complicated or
   fixed provisioning-based key management.  No existing option attempts
   to protect the mote identity and network metadata from monitoring.






Miller                  Expires November 17, 2015               [Page 3]

Internet-Draft                    tmesh                         May 2015


1.2.  Telehash Native

   By leveraging telehash [1] as the native encryption and mote identity
   platform, TMesh can start with some strong assumptions:

   o  each mote will have a unique stable 32-byte identity, the hashname

   o  two linked motes will have a unique long-lived session id, the
      routing token

   o  all payloads will be encrypted ciphertext

   o  retransmissions and acknowledgements happen at a higher level and
      are not required in the framing

   o  motes are members of a private mesh and only communicate with
      other verified members

1.3.  Vocabulary

   o  "mote" - a single physical transmitting/receiving device

   o  "knock" - a single transmission

   o  "window" - the period for a knock

   o  "window sequence" - each window will change frequency/channels in
      a sequence

   o  "epoch" - one entire set of window sequences

   o  "neighborhood" - the list of known nearby motes

   o  "z-index" - the self-asserted resource level (priority) from any
      mote

   o  "leader" - the highest z-index visible in any mote's neighborhood

   o  "lost" - when a mote hasn't knocked in one epoch or is reset

1.4.  Overview

   TMesh is the composite of three distinct layers, the physical radio
   medium encoding (PHY), the shared management of the spectrum (MAC),
   and the networking relationships between 2+ motes (Mesh).

   Common across all of these is the concept of an "epoch", which is a
   fixed period of time of 2^30 microseconds (about 18 minutes).  An



Miller                  Expires November 17, 2015               [Page 4]

Internet-Draft                    tmesh                         May 2015


   epoch is broken into 256 "windows" (about 4.2 seconds each) where one
   "knock" can occur from one mote to another with a specified PHY
   unique to that epoch.  A "knock" is the transmission of up to 128
   bytes of encrypted payload, plus any PHY-specific overhead.

   Every mote has at least one receiving epoch and one sending epoch per
   link to another mote, and will often have multiple epochs with other
   motes to increase the bandwidth available from the minimum 1/4 kbps
   average per epoch.  The number and types of epochs available depend
   entirely on the current energy budget, every epoch type has a fixed
   minimum energy cost for its lifetime.

1.4.1.  PHY

   An "epoch" is defined with a unique 16-byte identifier, specifying
   the exact PHY encoding details and including random bytes that act as
   a unique seed for that epoch.

   The first byte is a fixed "type" that determines the category of PHY
   encoding technique to use, often these are different modes on
   transceivers.  The following 1-7 bytes are headers that are specified
   by each type of encoding, and the remaining 8 bytes are always a
   unique random seed.

   The PHY encoding uses the headers to determine the power, channel,
   spreading, bitrate, etc details on the transmission/reception, and
   must use the random seed to vary the transmission frequency and
   specific timing offset of each window in the epoch.

   Transmitted payloads do not need whitening as encrypted packets are
   by nature DC-free.  They also do not need CRC as all telehash packets
   have authentication bytes included.

1.4.2.  MAC

   There is no mote addressing or other metadata included in the encoded
   bytes, no framing other than the length of the payload.  The
   uniqueness of the timing and signalling of each epoch is the mote
   addressing mechanism.

   The epoch 16 bytes are used as an AES-128 key, and the current count
   of windows since the first sync is used as the IV.  All payloads are
   encrypted before transmission even if they are already encrypted
   telehash packets.

   Additional MAC-only packet types are defined for exchanging the
   current set of epochs active between any two motes.  An additional
   pre-set "lost" mode is defined for bootstrapping two motes from



Miller                  Expires November 17, 2015               [Page 5]

Internet-Draft                    tmesh                         May 2015


   scratch or if they loose sync.

   Each mote should actively make use of multiple epochs with more
   efficient options to optimize the overall energy usage.  Every mote
   advertises their current energy resource level as a "z-index" as an
   additional mesh optimization strategy.

1.4.3.  Mesh

   There is two mechanisms used for enabling a larger scale mesh network
   with TMesh, "neighborhoods" (MAC layer) and "routers" (telehash/app
   layer).

   A neighborhood is the automatic sharing of other epochs one mote has
   active with every other mote it is linked with.  Every mote also
   supports a simple MAC-level window sequential forwarding service
   between neighbors to aid with discovery and resiliency.  The
   neighborhood map shared from each mote includes a unique addressible
   epoch id, the epoch, microsecond offset, and signal strength.

   A router is always the neighbor with the highest z-index, which
   inherits the responsibility to monitor each neighbor's neighborhood
   for other routers and establish direct or bridged links with them.
   Any mote with a packet for a non-local hashname will send it to their
   router, whom will send it to the next highest router it is connected
   to until it reaches the highest in the mesh.  The highest resourced
   router is responsible for maintaining an index of all available
   motes/hashnames in the mesh.


2.  Protocol Definition

2.1.  Terminology

   In this document, the key words "MUST", "MUST NOT", "REQUIRED",
   "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY",
   and "OPTIONAL" are to be interpreted as described in BCP 14, [RFC
   2119] and indicate requirement levels for compliant TMesh
   implementations.

2.2.  PHY

   Epoch type table:








Miller                  Expires November 17, 2015               [Page 6]

Internet-Draft                    tmesh                         May 2015


                            +------+----------+
                            | Byte | Encoding |
                            +------+----------+
                            | 0x00 | Reserved |
                            | 0x01 |    OOK   |
                            | 0x02 |  (G)FSK  |
                            | 0x03 |   LoRa   |
                            +------+----------+

2.2.1.  OOK

   TBD

2.2.2.  (G)FSK

   TBD

2.2.3.  LoRa

   Epoch Header

   o  byte 1 - dB power level & frequency band selector (915, 868, 433,
      etc)

   o  byte 2 - Bw & CodingRate (RegModemConfig 1)

   o  byte 3 - SpreadingFactor (RegModemConfig 2)

   o  byte 4-7 - random

   Knock is a 1-byte transmission of the knock length, a wait for it to
   be received/processed, then the payload.

2.3.  MAC

2.3.1.  Lost Mode

   Each PHY documents a single lost-mode epoch header, no encryption and
   only encodes a handshake with the recipient being the last 8 bytes of
   the epoch id.

2.4.  Mesh

   Describe neighborhoods and routers, and routers performing ongoing
   lost-mode duties.






Miller                  Expires November 17, 2015               [Page 7]

Internet-Draft                    tmesh                         May 2015


2.4.1.  z-index

   Every mote calculates its own "z-index", a uint8_t value that
   represents the resources it has available to assist with the mesh.
   It will vary based on the battery level or fixed power, as well as if
   the mote has greater network access (is an internet bridge) or is
   well located (based on configuration).

   The mote with the highest "z-index" in any neighborhood is known as
   the "local leader".

2.5.  Notes

   o  send packet for a mote directly to it, and then fallback to one
      known neighbor, then to the local leader

   o  lost mode is when all link state is lost or all epochs expired,
      local leaders must help by sending handshake knocks on a common
      encoder-defined channel for them to resync

      *  begin listening for any hard knock handshakes, generate link id
         and sync to it then handshake there

      *  if sleepy, only listen on the lost schedule

      *  local leaders are required to hard knock per epoch on the lost
         schedule

   o  resource based routing, highest resource gets undelivered packets

   o  highest leader for the whole mesh is responsible for mapping the
      full mesh, collecting undelivered's and re-routing them

   o  natural pooling around local resources, neighborhoods

   o  when you know a link's neighbors you can calculate their knock
      windows and detect possible overlaps to optimize for interference


3.  Implementation Notes


4.  Security Considerations


5.  References

URIs



Miller                  Expires November 17, 2015               [Page 8]

Internet-Draft                    tmesh                         May 2015


   [1]  <http://telehash.org>


Appendix A.  Examples

   This appendix provides some examples of the tmesh protocol operation.

                                   Request:


                                   Response:



Author's Address

   Jeremie Miller
   Filament
   Denver


   Email: jeremie@jabber.org
   URI:




























Miller                  Expires November 17, 2015               [Page 9]

