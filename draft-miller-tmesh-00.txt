


Network Working Group                                          J. Miller
Internet-Draft                                                  Filament
Intended status: Informational                              May 16, 2015
Expires: November 17, 2015


                  TMesh - Thing Mesh PHY/MAC Protocol
                         draft-miller-tmesh-00

Abstract

   A secure PHY/MAC based on telehash [1] designed for low-power sleepy
   devices.

Status of this Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at http://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on November 17, 2015.

Copyright Notice

   Copyright (c) 2015 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents
   (http://trustee.ietf.org/license-info) in effect on the date of
   publication of this document.  Please review these documents
   carefully, as they describe your rights and restrictions with respect
   to this document.  Code Components extracted from this document must
   include Simplified BSD License text as described in Section 4.e of
   the Trust Legal Provisions and are provided without warranty as
   described in the Simplified BSD License.






Miller                  Expires November 17, 2015               [Page 1]

Internet-Draft                    tmesh                         May 2015


Table of Contents

   1.  Introduction . . . . . . . . . . . . . . . . . . . . . . . . .  3
     1.1.  The Need for Standards . . . . . . . . . . . . . . . . . .  3
     1.2.  Telehash Native  . . . . . . . . . . . . . . . . . . . . .  4
     1.3.  Vocabulary . . . . . . . . . . . . . . . . . . . . . . . .  4
     1.4.  Overview . . . . . . . . . . . . . . . . . . . . . . . . .  5
       1.4.1.  PHY  . . . . . . . . . . . . . . . . . . . . . . . . .  5
       1.4.2.  MAC  . . . . . . . . . . . . . . . . . . . . . . . . .  6
       1.4.3.  Mesh . . . . . . . . . . . . . . . . . . . . . . . . .  6
   2.  Protocol Definition  . . . . . . . . . . . . . . . . . . . . .  7
     2.1.  Terminology  . . . . . . . . . . . . . . . . . . . . . . .  7
     2.2.  PHY  . . . . . . . . . . . . . . . . . . . . . . . . . . .  7
       2.2.1.  OOK  . . . . . . . . . . . . . . . . . . . . . . . . .  7
       2.2.2.  (G)FSK . . . . . . . . . . . . . . . . . . . . . . . .  7
       2.2.3.  LoRa . . . . . . . . . . . . . . . . . . . . . . . . .  7
       2.2.4.  (O)QPSK  . . . . . . . . . . . . . . . . . . . . . . .  8
     2.3.  MAC  . . . . . . . . . . . . . . . . . . . . . . . . . . .  8
       2.3.1.  Lost Mode  . . . . . . . . . . . . . . . . . . . . . .  8
     2.4.  Mesh . . . . . . . . . . . . . . . . . . . . . . . . . . .  9
       2.4.1.  z-index  . . . . . . . . . . . . . . . . . . . . . . .  9
     2.5.  Notes  . . . . . . . . . . . . . . . . . . . . . . . . . .  9
   3.  Implementation Notes . . . . . . . . . . . . . . . . . . . . . 10
   4.  Security Considerations  . . . . . . . . . . . . . . . . . . . 10
   5.  References . . . . . . . . . . . . . . . . . . . . . . . . . . 10
   Appendix A.  Examples  . . . . . . . . . . . . . . . . . . . . . . 10
   Author's Address . . . . . . . . . . . . . . . . . . . . . . . . . 10
























Miller                  Expires November 17, 2015               [Page 2]

Internet-Draft                    tmesh                         May 2015


1.  Introduction

   As embedded devices continue to increase in capabilities while
   falling in cost there is a growing challenge to manage their energy
   resources for wirelessly networking them together.  While there are
   many options for short-range 2.4GHz networks such as Bluetooth Smart
   (BLE), low-power WiFi, Zigbee and 802.15.4 based mesh networks, there
   are few choices for long-range sub-GHz mesh networking.

   TMesh builds on the strong end-to-end encryption and privacy
   capabilities of [telehash v3] by adding a uniquely matched secure
   Physical RF and Media Access Control protocol.

   The key attributes of TMesh are:

   o  high density - thousands per square mile

   o  very low power - years on coin cell batteries

   o  wide area - optimized for long-range capable radios

   o  high latency - low minimum duty cycle from seconds to minutes

   o  peer aware meshing - does not require dedicated coordinator motes

   o  high interference resiliency - bi-modal PHY to maximize
      connectivity in all conditions

   o  dynamically resource optimized - powered motes naturally provide
      more assistance

   o  zero metadata broadcast - same absolute privacy and security
      principles as telehash

1.1.  The Need for Standards

   The existing best choices are all either only partial solutions like
   802.15.4, require membership to participate like LoRaWAN, ZigBee, and
   Z-Wave, or are focused on specific verticals like DASH7 and Wireless
   M-Bus.

   All other options only provide incomplete or indadequate security and
   privacy, most use only optional AES-128 and often with complicated or
   fixed provisioning-based key management.  No existing option attempts
   to protect the mote identity and network metadata from monitoring.






Miller                  Expires November 17, 2015               [Page 3]

Internet-Draft                    tmesh                         May 2015


1.2.  Telehash Native

   By leveraging telehash [1] as the native encryption and mote identity
   platform, TMesh can start with some strong assumptions:

   o  each mote will have a unique stable 32-byte identity, the hashname

   o  two linked motes will have a unique long-lived session id, the
      routing token

   o  all payloads will be encrypted ciphertext with forward secrecy

   o  retransmissions and acknowledgements happen at a higher level and
      are not required in the framing

   o  motes are members of a private mesh and only communicate with
      other verified members

   o  chunked encoding defines how to serialize variable length packets
      into fixed transmission frames

1.3.  Vocabulary

   o  "mote" - a single physical transmitting/receiving device

   o  "knock" - a single transmission

   o  "window" - the period for a knock, 2^22 microseconds (~4.2
      seconds)

   o  "window sequence" - each window will change frequency/channels in
      a sequence

   o  "epoch" - one entire set of window sequences, 256 windows / 2^30
      microseconds (~18 minutes)

   o  "neighborhood" - the list of known nearby motes

   o  "z-index" - the self-asserted resource level (priority) from any
      mote

   o  "leader" - the highest z-index visible in any mote's neighborhood

   o  "lost" - when a mote hasn't knocked in one epoch or is reset







Miller                  Expires November 17, 2015               [Page 4]

Internet-Draft                    tmesh                         May 2015


1.4.  Overview

   TMesh is the composite of three distinct layers, the physical radio
   medium encoding (PHY), the shared management of the spectrum (MAC),
   and the networking relationships between 2+ motes (Mesh).

   Common across all of these is the concept of an "epoch", which is a
   fixed period of time of 2^30 microseconds.  An epoch is broken into
   256 "windows" where one "knock" can occur from one mote to another
   with a specified PHY unique to that epoch.  A "knock" is the
   transmission of a 64 byte fixed frame of payload, plus any PHY-
   specific overhead (preamble).

   Each epoch is capable of a max throughput of 120bps, or a total of
   16k over the full epoch period (about 18 minutes).  Every mote has at
   least one receiving epoch and one sending epoch per link to another
   mote, and will often have multiple epochs with other motes to
   increase the bandwidth available.

   The number and types of epochs available depend entirely on the
   current energy budget, every epoch type has a fixed minimum energy
   cost for its lifetime.

1.4.1.  PHY

   An "epoch" is defined with a unique 16-byte identifier, specifying
   the exact PHY encoding details and including random bytes that serve
   as a shared key for that epoch.

   The first byte is a fixed "type" that determines the category of PHY
   encoding technique to use, often these are different modes on
   transceivers.  The following 1-7 bytes are headers that are specified
   by each type of encoding, and the remaining 8 bytes are always a
   unique random seed body.

   The PHY encoding uses the headers to determine the power, channel,
   spreading, bitrate, the use of any FEC coding, etc details on the
   transmission/reception.  The PHY must use the entire epoch identifer
   including the random seed body and the current epoch counter to vary
   the transmission frequency and specific knock timing offset of each
   window in the epoch.

   Regulatory restrictions around channel dwell time may require
   additional frequency changes during one window as determined by each
   specific PHY implementation.

   Transmitted payloads do not need whitening as encrypted packets are
   by nature DC-free.  They also do not need CRC as all telehash packets



Miller                  Expires November 17, 2015               [Page 5]

Internet-Draft                    tmesh                         May 2015


   have authentication bytes included for integrity verification.

   If the chunk-encoded encrypted payload does not fill the fixed 64
   byte frame the remaining bytes must contain additional data so as to
   not reveal the payload size.

      WIP - determine a standard filler data format that will add
      additional dynamically sized error correction, explore taking
      advantage of the fact that the inner and outer bitstreams are
      encrypted and bias-free (Gaussian distribution divergence?), the
      last byte should always duplicate the first/length to ensure
      differentiation between payload/filler

1.4.2.  MAC

   There is no mote addressing or other metadata included in the encoded
   bytes, no framing other than the length of the payload.  The
   uniqueness of the timing and signalling of each epoch is the mote
   addressing mechanism.

   The epoch 16 bytes are used as an AES-128 key, and the current count
   of total windows since the first sync is used as the IV.  All
   payloads are encrypted before transmission regardless of if they are
   already encrypted.

   Additional MAC-only packet types are defined for exchanging the
   current set of epochs active between any two motes.  An additional
   pre-set "lost" mode is defined for bootstrapping motes from scratch
   or if they loose sync.

   Each mote should actively make use of multiple epochs with more
   efficient options to optimize the overall energy usage.  Every mote
   advertises their current energy resource level as a "z-index" as an
   additional mesh optimization strategy.

1.4.3.  Mesh

   There is two mechanisms used for enabling a larger scale mesh network
   with TMesh, "neighborhoods" (MAC layer) and "routers" (telehash/app
   layer).

   A neighborhood is the automatic sharing of other epochs one mote has
   active with every other mote it is linked with.  Every mote also
   supports a simple MAC-level window sequential forwarding service
   between neighbors to aid with discovery and resiliency.  The
   neighborhood map shared from each mote includes a unique addressible
   epoch id, the epoch, microsecond offset, and signal strength.




Miller                  Expires November 17, 2015               [Page 6]

Internet-Draft                    tmesh                         May 2015


   A router is always the neighbor with the highest z-index, which
   inherits the responsibility to monitor each neighbor's neighborhood
   for other routers and establish direct or bridged links with them.
   Any mote with a packet for a non-local hashname will send it to their
   router, whom will send it to the next highest router it is connected
   to until it reaches the highest in the mesh.  The highest resourced
   router is responsible for maintaining an index of all available
   motes/hashnames in the mesh.


2.  Protocol Definition

2.1.  Terminology

   In this document, the key words "MUST", "MUST NOT", "REQUIRED",
   "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY",
   and "OPTIONAL" are to be interpreted as described in BCP 14, [RFC
   2119] and indicate requirement levels for compliant TMesh
   implementations.

2.2.  PHY

   Epoch type table:

                            +------+----------+
                            | Byte | Encoding |
                            +------+----------+
                            | 0x00 | Reserved |
                            | 0x01 |    OOK   |
                            | 0x02 |  (G)FSK  |
                            | 0x03 |   LoRa   |
                            | 0x04 |  (O)QPSK |
                            +------+----------+

2.2.1.  OOK

   TBD

2.2.2.  (G)FSK

   TBD

2.2.3.  LoRa

   Epoch Header






Miller                  Expires November 17, 2015               [Page 7]

Internet-Draft                    tmesh                         May 2015


   o  byte 1 - transmitting energy mA

   o  byte 2 - standard frequency range (see table)

   o  byte 3 - Bw & CodingRate (RegModemConfig 1)

   o  byte 4 - SpreadingFactor (RegModemConfig 2)

   o  byte 5-7 - zeros (reserved)

   All preambles are set to the minimum size of 6.

   LoRa is used in implicit header mode with a fixed size of 64.

   Freq Table:

        +--------+-----+------+----------+-----------------+------+
        | Region | Low | High | mW (erp) |       Reg       |  ID  |
        +--------+-----+------+----------+-----------------+------+
        |   US   | 902 |  928 |    100   | FCC part 15.247 | 0x01 |
        |   EU   | 863 |  870 |          | ETSI EN 300-220 | 0x02 |
        |  Japan | 915 |  930 |          |    ARIB T-108   | 0x03 |
        |  China | 779 |  787 |    10    |       SRRC      | 0x04 |
        +--------+-----+------+----------+-----------------+------+

   In the US region 0x01 to reach maximum transmit power each window may
   transmit on a channel for more than 400ms, when that limit is reached
   a new pseudo-random frequency must be derived from the Epoch and
   hopped to.  See App Note [2].

   Notes on ranges:

   o  SRRC [3]

   o  Z-Wave [4]

   o  Atmel [5]

2.2.4.  (O)QPSK

   TBD

2.3.  MAC

2.3.1.  Lost Mode

   Every mesh must define and share one or more "lost epochs" that are
   used to send beacons for synchronization of any lost motes.



Miller                  Expires November 17, 2015               [Page 8]

Internet-Draft                    tmesh                         May 2015


   The lost epoch headers are combined with the first 8 bytes of each
   mote's hashname to derive every mote-specific lost epoch.  When lost
   or seeking a lost mote, a beacon with a minimum/zero length is
   transmitted during the mesh lost epoch to signal the mote's timing
   sync and current window (based on the frequency).

   The mote's individual lost epoch must only be used to receive
   handshakes that contain the unique link epochs available.

   Motes may run multiple concurrent lost epochs to minimize the
   discovery time.

2.4.  Mesh

   Describe neighborhoods and routers, and routers performing ongoing
   lost-mode duties.

2.4.1.  z-index

   Every mote calculates its own "z-index", a uint8_t value that
   represents the resources it has available to assist with the mesh.
   It will vary based on the battery level or fixed power, as well as if
   the mote has greater network access (is an internet bridge) or is
   well located (based on configuration).

   The mote with the highest "z-index" in any neighborhood is known as
   the "local leader".

   The z-index also serves as a window mask for all of that mote's
   receiving epoch windows by powers of two.

2.5.  Notes

   o  if a packet chunk is incomplete in one window, prioritize
      subsequent windows from that mote

   o  send packet for a mote directly to it, and then fallback to one
      known neighbor, then to the local leader

   o  lost mode is when all link state is lost or all epochs expired,
      local leaders run the lost epochs and may coordinate to minimize

   o  resource based routing, highest resource gets undelivered packets

   o  highest leader for the whole mesh is responsible for mapping the
      full mesh, collecting undelivered's and re-routing them





Miller                  Expires November 17, 2015               [Page 9]

Internet-Draft                    tmesh                         May 2015


   o  natural pooling around local resources, neighborhoods

   o  when you know a link's neighbors you can calculate their knock
      windows and detect possible overlaps to optimize for interference


3.  Implementation Notes


4.  Security Considerations


5.  References

URIs

   [1]  <http://telehash.org>

   [2]  <https://www.semtech.com/images/promo/
        FCC_Part15_regulations_Semtech.pdf>

   [3]  <http://www.srrccn.org/srrc-approval-new2.htm>

   [4]  <http://image.slidesharecdn.com/
        smarthometechshort-13304126815608-phpapp01-120228010616-
        phpapp01/95/smart-home-tech-short-14-728.jpg>

   [5]  <http://blog.atmel.com/2013/04/23/
        praise-the-lord-a-new-sub-1ghz-rf-transceiver-supporting-4-
        major-regional-frequency-bands/>


Appendix A.  Examples

   This appendix provides some examples of the tmesh protocol operation.

                                   Request:


                                   Response:











Miller                  Expires November 17, 2015              [Page 10]

Internet-Draft                    tmesh                         May 2015


Author's Address

   Jeremie Miller
   Filament
   Denver


   Email: jeremie@jabber.org
   URI:










































Miller                  Expires November 17, 2015              [Page 11]

