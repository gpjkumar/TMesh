<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE rfc SYSTEM 'rfc2629.dtd' []>
<rfc ipr="trust200902" category="info" docName="draft-miller-tmesh-00">
<?rfc toc="yes"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes"?>
<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<front>
<title abbrev="tmesh">TMesh - Thing Mesh PHY/MAC Protocol</title>

<author initials="J." surname="Miller" fullname="Jeremie Miller">
<organization>Filament</organization>
<address>
<postal>
<street></street>
<city>Denver</city>
<code></code>
<country></country>
</postal>
<email>jeremie@jabber.org</email>
<uri></uri>
</address>
</author>
<date year="2015" month="May" day="16"/>

<area>Internet</area>
<workgroup></workgroup>
<keyword>mesh</keyword>
<keyword>protocol</keyword>
<keyword>telehash</keyword>
<keyword>phy</keyword>


<abstract>
<t>A secure PHY/MAC based on <eref target="http://telehash.org">telehash</eref> designed for low-power sleepy devices.
</t>
</abstract>

</front>

<middle>

<section anchor="introduction" title="Introduction">
<t>As embedded devices continue to increase in capabilities while falling in cost there is a growing challenge to manage their energy resources for wirelessly networking them together.  While there are many options for short-range 2.4GHz networks such as Bluetooth Smart (BLE), low-power WiFi, Zigbee and 802.15.4 based mesh networks, there are few choices for long-range sub-GHz mesh networking.
</t>
<t>TMesh builds on the strong end-to-end encryption and privacy capabilities of [telehash v3] by adding a uniquely matched secure Physical RF and Media Access Control protocol.
</t>
<t>The key attributes of TMesh are:
</t>
<t>
<list style="symbols">
<t>high density - thousands per square mile</t>
<t>very low power - years on coin cell batteries</t>
<t>wide area - optimized for long-range capable radios</t>
<t>high latency - low minimum duty cycle from seconds to minutes</t>
<t>peer aware meshing - does not require dedicated coordinator motes</t>
<t>high interference resiliency - bi-modal PHY to maximize connectivity in all conditions</t>
<t>dynamically resource optimized - powered motes naturally provide more assistance</t>
<t>zero metadata broadcast - same absolute privacy and security principles as telehash</t>
</list>
</t>

<section anchor="the-need-for-standards" title="The Need for Standards">
<t>The existing best choices are all either only partial solutions like 802.15.4, require membership to participate like LoRaWAN, ZigBee, and Z-Wave, or are focused on specific verticals like DASH7 and Wireless M-Bus.
</t>
<t>All other options only provide incomplete or indadequate security and privacy, most use only optional AES-128 and often with complicated or fixed provisioning-based key management.  No existing option attempts to protect the mote identity and network metadata from monitoring.
</t>
</section>

<section anchor="telehash-native" title="Telehash Native">
<t>By leveraging <eref target="http://telehash.org">telehash</eref> as the native encryption and mote identity platform, TMesh can start with some strong assumptions:
</t>
<t>
<list style="symbols">
<t>each mote will have a unique stable 32-byte identity, the hashname</t>
<t>two linked motes will have a unique long-lived session id, the routing token</t>
<t>all payloads will be encrypted ciphertext with forward secrecy</t>
<t>retransmissions and acknowledgements happen at a higher level and are not required in the framing</t>
<t>motes are members of a private mesh and only communicate with other verified members</t>
<t>chunked encoding defines how to serialize variable length packets into fixed transmission frames</t>
</list>
</t>
</section>

<section anchor="vocabulary" title="Vocabulary">
<t>
<list style="symbols">
<t><spanx style="verb">mote</spanx> - a single physical transmitting/receiving device</t>
<t><spanx style="verb">knock</spanx> - a single transmission</t>
<t><spanx style="verb">window</spanx> - the period for a knock, 2^22 microseconds (~4.2 seconds)</t>
<t><spanx style="verb">window sequence</spanx> - each window will change frequency/channels in a sequence</t>
<t><spanx style="verb">epoch</spanx> - one entire set of window sequences, 256 windows / 2^30 microseconds (~18 minutes)</t>
<t><spanx style="verb">neighborhood</spanx> - the list of known nearby motes</t>
<t><spanx style="verb">z-index</spanx> - the self-asserted resource level (priority) from any mote</t>
<t><spanx style="verb">leader</spanx> - the highest z-index visible in any mote's neighborhood</t>
<t><spanx style="verb">lost</spanx> - when a mote hasn't knocked in one epoch or is reset</t>
</list>
</t>
</section>

<section anchor="overview" title="Overview">
<t>TMesh is the composite of three distinct layers, the physical radio medium encoding (PHY), the shared management of the spectrum (MAC), and the networking relationships between 2+ motes (Mesh).
</t>
<t>Common across all of these is the concept of an <spanx style="verb">epoch</spanx>, which is a fixed period of time of 2^30 microseconds.  An epoch is broken into 256 <spanx style="verb">windows</spanx> where one <spanx style="verb">knock</spanx> can occur from one mote to another with a specified PHY unique to that epoch.  A <spanx style="verb">knock</spanx> is the transmission of a 64 byte fixed frame of payload, plus any PHY-specific overhead (preamble).
</t>
<t>Each epoch is capable of a max throughput of 120bps, or a total of 16k over the full epoch period (about 18 minutes). Every mote has at least one receiving epoch and one sending epoch per link to another mote, and will often have multiple epochs with other motes to increase the bandwidth available.
</t>
<t>The number and types of epochs available depend entirely on the current energy budget, every epoch type has a fixed minimum energy cost for its lifetime.
</t>

<section anchor="phy" title="PHY">
<t>An <spanx style="verb">epoch</spanx> is defined with a unique 16-byte identifier, specifying the exact PHY encoding details and including random bytes that serve as a shared key for that epoch.
</t>
<t>The first byte is a fixed <spanx style="verb">type</spanx> that determines the category of PHY encoding technique to use, often these are different modes on transceivers.  The following 1-7 bytes are headers that are specified by each type of encoding, and the remaining 8 bytes are always a unique random seed body.
</t>
<t>The PHY encoding uses the headers to determine the power, channel, spreading, bitrate, the use of any FEC coding, etc details on the transmission/reception.  The PHY must use the entire epoch identifer including the random seed body and the current epoch counter to vary the transmission frequency and specific knock timing offset of each window in the epoch.
</t>
<t>Regulatory restrictions around channel dwell time may require additional frequency changes during one window as determined by each specific PHY implementation.
</t>
<t>Transmitted payloads do not need whitening as encrypted packets are by nature DC-free.  They also do not need CRC as all telehash packets have authentication bytes included for integrity verification.
</t>
<t>If the chunk-encoded encrypted payload does not fill the fixed 64 byte frame the remaining bytes must contain additional data so as to not reveal the payload size.
</t>
<t><list style="empty">
<t>WIP - determine a standard filler data format that will add additional dynamically sized error correction, explore taking advantage of the fact that the inner and outer bitstreams are encrypted and bias-free (Gaussian distribution divergence?), the last byte should always duplicate the first/length to ensure differentiation between payload/filler
</t>
</list></t>
</section>

<section anchor="mac" title="MAC">
<t>There is no mote addressing or other metadata included in the encoded bytes, no framing other than the length of the payload.  The uniqueness of the timing and signalling of each epoch is the mote addressing mechanism.
</t>
<t>The epoch 16 bytes are used as an AES-128 key, and the current count of total windows since the first sync is used as the IV.  All payloads are encrypted before transmission regardless of if they are already encrypted.
</t>
<t>Additional MAC-only packet types are defined for exchanging the current set of epochs active between any two motes.  An additional pre-set <spanx style="verb">lost</spanx> mode is defined for bootstrapping motes from scratch or if they loose sync.
</t>
<t>Each mote should actively make use of multiple epochs with more efficient options to optimize the overall energy usage.  Every mote advertises their current energy resource level as a <spanx style="verb">z-index</spanx> as an additional mesh optimization strategy.
</t>
</section>

<section anchor="mesh" title="Mesh">
<t>There is two mechanisms used for enabling a larger scale mesh network with TMesh, <spanx style="verb">neighborhoods</spanx> (MAC layer) and <spanx style="verb">routers</spanx> (telehash/app layer).
</t>
<t>A neighborhood is the automatic sharing of other epochs one mote has active with every other mote it is linked with.  Every mote also supports a simple MAC-level window sequential forwarding service between neighbors to aid with discovery and resiliency.  The neighborhood map shared from each mote includes a unique addressible epoch id, the epoch, microsecond offset, and signal strength.
</t>
<t>A router is always the neighbor with the highest z-index, which inherits the responsibility to monitor each neighbor's neighborhood for other routers and establish direct or bridged links with them.  Any mote with a packet for a non-local hashname will send it to their router, whom will send it to the next highest router it is connected to until it reaches the highest in the mesh.  The highest resourced router is responsible for maintaining an index of all available motes/hashnames in the mesh.
</t>
</section>
</section>
</section>

<section anchor="protocol-definition" title="Protocol Definition">

<section anchor="terminology" title="Terminology">
<t>In this document, the key words &quot;MUST&quot;, &quot;MUST NOT&quot;, &quot;REQUIRED&quot;,
&quot;SHALL&quot;, &quot;SHALL NOT&quot;, &quot;SHOULD&quot;, &quot;SHOULD NOT&quot;, &quot;RECOMMENDED&quot;, &quot;MAY&quot;,
and &quot;OPTIONAL&quot; are to be interpreted as described in BCP 14, [RFC 2119]
and indicate requirement levels for compliant TMesh implementations.
</t>
</section>

<section anchor="phy-1" title="PHY">
<t>Epoch type table:
</t>
<texttable>
<ttcol align="center">Byte</ttcol>
<ttcol align="center">Encoding</ttcol>

<c>0x00</c><c>Reserved</c>
<c>0x01</c><c>OOK</c>
<c>0x02</c><c>(G)FSK</c>
<c>0x03</c><c>LoRa</c>
<c>0x04</c><c>(O)QPSK</c>
</texttable>

<section anchor="ook" title="OOK">
<t>TBD
</t>
</section>

<section anchor="gfsk" title="(G)FSK">
<t>TBD
</t>
</section>

<section anchor="lora" title="LoRa">
<t>Epoch Header
</t>
<t>
<list style="symbols">
<t>byte 1 - transmitting energy mA</t>
<t>byte 2 - standard frequency range (see table)</t>
<t>byte 3 - Bw &amp; CodingRate (RegModemConfig 1)</t>
<t>byte 4 - SpreadingFactor (RegModemConfig 2)</t>
<t>byte 5-7 - zeros (reserved)</t>
</list>
</t>
<t>All preambles are set to the minimum size of 6.
</t>
<t>LoRa is used in implicit header mode with a fixed size of 64.
</t>
<t>Freq Table:
</t>
<texttable>
<ttcol align="center">Region</ttcol>
<ttcol align="center">Low</ttcol>
<ttcol align="center">High</ttcol>
<ttcol align="center">mW (erp)</ttcol>
<ttcol align="center">Reg</ttcol>
<ttcol align="center">ID</ttcol>

<c>US</c><c>902</c><c>928</c><c>100</c><c>FCC part 15.247</c><c>0x01</c>
<c>EU</c><c>863</c><c>870</c><c></c><c>ETSI EN 300-220</c><c>0x02</c>
<c>Japan</c><c>915</c><c>930</c><c></c><c>ARIB T-108</c><c>0x03</c>
<c>China</c><c>779</c><c>787</c><c>10</c><c>SRRC</c><c>0x04</c>
</texttable>
<t>In the US region 0x01 to reach maximum transmit power each window may transmit on a channel for more than 400ms, when that limit is reached a new pseudo-random frequency must be derived from the Epoch and hopped to.  See <eref target="https://www.semtech.com/images/promo/FCC_Part15_regulations_Semtech.pdf">App Note</eref>.
</t>
<t>Notes on ranges:
</t>
<t>
<list style="symbols">
<t><eref target="http://www.srrccn.org/srrc-approval-new2.htm">SRRC</eref></t>
<t><eref target="http://image.slidesharecdn.com/smarthometechshort-13304126815608-phpapp01-120228010616-phpapp01/95/smart-home-tech-short-14-728.jpg">Z-Wave</eref></t>
<t><eref target="http://blog.atmel.com/2013/04/23/praise-the-lord-a-new-sub-1ghz-rf-transceiver-supporting-4-major-regional-frequency-bands/">Atmel</eref></t>
</list>
</t>
</section>

<section anchor="oqpsk" title="(O)QPSK">
<t>TBD
</t>
</section>
</section>

<section anchor="mac-1" title="MAC">

<section anchor="lost-mode" title="Lost Mode">
<t>Every mesh must define and share one or more common <spanx style="verb">lost headers</spanx> that are used to generate <spanx style="verb">lost epochs</spanx> that assist with background synchronization of any lost motes.
</t>
<t>The lost headers (8 bytes) are combined with the first 8 bytes of each mote's hashname to derive every mote-specific <spanx style="verb">lost epoch</spanx>.  These epochs are used for receive only, a mote can only listen and receive encrypted handshakes on their own unique lost epoch that provide new link epochs to synchronize with.
</t>
<t>The lost mode takes advantage of the fact that every epoch makes use of a shared medium that is divided into channels, such that every lost epoch will have some overlap with other private link epochs that a mote is transmitting on.  In order to minimize the time required to re-synchronize, only the first and second window sequence of the lost epoch are used.  When any mote sends any knock on the same channel as one of their lost epoch sequence 0, they should then attempt to receive a handshake knock at that lost epoch sequence 1.
</t>
<t>The local leader should attempt to maximize their use of lost epoch overlapping channels to allow for fast resynchronization, even to the point of sending arbitrary/random knocks on that channel if nothing has been transmitted recently. When a mote is lost, it should also send regular knocks on the lost epoch channels of nearby known motes.
</t>
</section>

<section anchor="pairing-mode" title="Pairing Mode">
<t>When a new un-linked mote must be introduced directly into a mesh and there is no out-of-band mechanism to signal the public key material for existing motes, a special temporary pairing mode may be enabled on an existing mote.  The un-linked mote must minimally have the lost headers to derive the pairing channel that will be used.
</t>
<t>When pairing mode is enabled on an existing mote in the mesh, it will build a <spanx style="verb">pairing epoch</spanx> by combining the lost epoch with 8 zero bytes, and send a special pair knock on that epoch's window sequence 0.  The pair knock must contain the senders public key so that the un-linked mote can generate an encrypted handshake.  The special pair knock also serves as a lost knock time base allowing the recipient to derive the unique lost epoch for the sender and immediately send a handshake back to establish a link.
</t>
<t>This functionality should not exist or be enabled/deployed by default, it should only be included when management policy explicitly requires it for special use cases.
</t>
</section>
</section>

<section anchor="mesh-1" title="Mesh">
<t>Describe neighborhoods and routers, and routers performing ongoing lost-mode duties.
</t>

<section anchor="zindex" title="z-index">
<t>Every mote calculates its own <spanx style="verb">z-index</spanx>, a uint8_t value that represents the resources it has available to assist with the mesh.  It will vary based on the battery level or fixed power, as well as if the mote has greater network access (is an internet bridge) or is well located (based on configuration).
</t>
<t>The mote with the highest <spanx style="verb">z-index</spanx> in any neighborhood is known as the <spanx style="verb">local leader</spanx>.
</t>
<t>The z-index also serves as a window mask for all of that mote's receiving epoch windows by powers of two.
</t>
</section>
</section>

<section anchor="notes" title="Notes">
<t>
<list style="symbols">
<t>if a packet chunk is incomplete in one window, prioritize subsequent windows from that mote</t>
<t>send packet for a mote directly to it, and then fallback to one known neighbor, then to the local leader</t>
<t>lost mode is when all link state is lost or all epochs expired, local leaders run the lost epochs and may coordinate to minimize</t>
<t>resource based routing, highest resource gets undelivered packets</t>
<t>highest leader for the whole mesh is responsible for mapping the full mesh, collecting undelivered’s and re-routing them</t>
<t>natural pooling around local resources, neighborhoods</t>
<t>when you know a link's neighbors you can calculate their knock windows and detect possible overlaps to optimize for interference</t>
</list>
</t>
</section>
</section>

<section anchor="implementation-notes" title="Implementation Notes">
</section>

<section anchor="security-considerations" title="Security Considerations">
</section>

<section anchor="references" title="References">
</section>

</middle>
<back>

<section anchor="examples" title="Examples">
<t>This appendix provides some examples of the tmesh protocol operation.
</t>

<figure align="center"><artwork align="center">
   Request:


   Response:

</artwork></figure>
</section>

</back>
</rfc>
