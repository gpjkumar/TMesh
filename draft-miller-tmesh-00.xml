<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE rfc SYSTEM 'rfc2629.dtd' []>
<rfc ipr="trust200902" category="info" docName="draft-miller-tmesh-00">
<?rfc toc="yes"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes"?>
<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<front>
<title abbrev="tmesh">TMesh - Thing Mesh PHY/MAC Protocol</title>

<author initials="J." surname="Miller" fullname="Jeremie Miller">
<organization>Filament</organization>
<address>
<postal>
<street></street>
<city>Denver</city>
<code></code>
<country></country>
</postal>
<email>jeremie@jabber.org</email>
<uri></uri>
</address>
</author>
<date year="2015" month="May" day="16"/>

<area>Internet</area>
<workgroup></workgroup>
<keyword>mesh</keyword>
<keyword>protocol</keyword>
<keyword>telehash</keyword>
<keyword>phy</keyword>


<abstract>
<t>A secure PHY/MAC based on <eref target="http://telehash.org">telehash</eref> designed for low-power sleepy devices.
</t>
</abstract>

</front>

<middle>

<section anchor="introduction" title="Introduction">
<t>As embedded devices continue to increase in capabilities while falling in cost there is a growing challenge to manage their energy resources for wirelessly networking them together.  While there are many options for short-range 2.4GHz networks such as Bluetooth Smart (BLE), low-power WiFi, Zigbee and 802.15.4 based mesh networks, there are few choices for long-range sub-GHz networking.
</t>
<t>TMesh builds on the strong end-to-end encryption and privacy capabilities of [telehash v3] by adding a uniquely matched Physical RF and Media Access Control protocol.
</t>
<t>The key attributes of TMesh are:
</t>
<t>
<list style="symbols">
<t>high density - thousands per square mile</t>
<t>very low power - years on common batteries</t>
<t>wide area - optimized for long-range capable radios</t>
<t>high lateny - low duty cycle, 10s of seconds of sleep</t>
<t>peer aware meshing - does not require special purpose coordinator motes</t>
<t>high interference resiliency - bi-modal PHY to maximize connectivity in all conditions</t>
<t>dynamically resource optimized - powered motes naturally provide more assistance</t>
<t>no identity on the air - same absolute privacy and security principles as telehash</t>
</list>
</t>

<section anchor="the-need-for-standards" title="The Need for Standards">
<t>The existing best choices are all either only partial solutions like 802.15.4, require membership to participate like LoRaWAN and ZigBee, or are focused on specific verticals like DASH7 and Wireless M-BUS.
</t>
<t>All other options only provide incomplete or indadequate security and privacy, most use only optional AES-128 and often with complicated or fixed provisioning-based key management.  No existing option attempts to protect the mote identity and network metadata from monitoring.
</t>
</section>

<section anchor="telehash-native" title="Telehash Native">
<t>By leveraging <eref target="http://telehash.org">telehash</eref> as the native encryption and mote identity platform, TMesh can start with some strong assumptions:
</t>
<t>
<list style="symbols">
<t>each mote will have a unique stable 32-byte identity, the hashname</t>
<t>two linked motes will have a unique long-lived session id, the routing token</t>
<t>all payloads will be encrypted ciphertext</t>
<t>retransmissions and acknowledgements happen at a higher level and are not required</t>
<t>motes are members of a private mesh and only communicate with other verified members</t>
<t>telehash defines a useful <spanx style="verb">EVEN</spanx> and <spanx style="verb">ODD</spanx> ordering relationship between two motes</t>
</list>
</t>
</section>

<section anchor="vocabulary" title="Vocabulary">
<t>
<list style="symbols">
<t><spanx style="verb">mote</spanx></t>
<t><spanx style="verb">knock</spanx></t>
<t><spanx style="verb">hard knock</spanx></t>
<t><spanx style="verb">soft knock</spanx></t>
<t><spanx style="verb">EVEN</spanx> / <spanx style="verb">ODD</spanx></t>
<t><spanx style="verb">window</spanx></t>
<t><spanx style="verb">window sequence</spanx></t>
<t><spanx style="verb">epoch</spanx></t>
<t><spanx style="verb">encoder</spanx></t>
<t><spanx style="verb">neighborhood</spanx></t>
<t><spanx style="verb">Z</spanx></t>
<t><spanx style="verb">leader</spanx></t>
<t><spanx style="verb">lost</spanx></t>
</list>
</t>
</section>

<section anchor="overview--phy" title="Overview - PHY">
<t>All radio PHY operations are bi-modal, with a <spanx style="verb">hard knock</spanx> and a <spanx style="verb">soft knock</spanx>.  Each <spanx style="verb">knock</spanx> is a single private transmission from one mote to another using an established telehash link.  The <spanx style="verb">knock</spanx> itself is always in two distinct parts, a single boolean notification followed by a short delay and then the full payload transmission.
</t>
<t>The <spanx style="verb">hard knock</spanx> is designed for maximum range and is not optimized for energy efficiency, it is the fallback mode after any <spanx style="verb">soft knock</spanx> has timed out.
</t>
<t>The <spanx style="verb">soft knock</spanx> is designed to take advantage of a transceiver's most efficient modes and capabilities, always minimizing the energy required to transmit.
</t>
<t>Transmitted payloads do not need whitening as encrypted packets are inherently DC-free.  They also do not need CRC as all packets have authentication bytes included.
</t>
<t>Channel frequency definitions are unique to each link and derived from the link's routing token.  The <spanx style="verb">window sequence</spanx> for each knock will do one full rotation per <spanx style="verb">epoch</spanx>, where at least one knock was required from each mote during for it to be valid and start over.
</t>
<t>There are multiple <spanx style="verb">knock encoders</spanx> defined that specify how each knock is actually transmitted via RF depending on the transceiver hardware's capabilities.  These range from highly compatible ones such as ASK, commonly available ones like GFSK, and more advanced/vendor-specific ones such as LoRa.  A mote advertises the encoders it supports as a telehash path.
</t>
<t>Each encoder also specifies the knock <spanx style="verb">window</spanx> length, which is 2x the minimum amount of time for a transceiver to transition between transmit and receive and determines the maximum allowable oscillator drift between epochs.
</t>
</section>

<section anchor="overview--mac" title="Overview - MAC">
<t>To operate as a mesh network, each mote maintains a list of its radio neighbors and shares that list with each of them for discovery.  This list is called a mote's <spanx style="verb">neighborhood</spanx> and contains mostly soft-knock neighbors with a few hard-knock only neighbors to maximize connectivity.
</t>
<t>Every mote calculates its own <spanx style="verb">Z</spanx> index, a uint8_t value that represents the resources it has available to assist with the mesh.  It will vary based on the battery level or fixed power, as well as if the mote has greater network access (is an internet bridge) or is well located (based on configuration).
</t>
<t>The mote with the highest <spanx style="verb">Z</spanx> in any neighborhood is known as the <spanx style="verb">local leader</spanx>.
</t>
</section>
</section>

<section anchor="protocol-definition" title="Protocol Definition">

<section anchor="terminology" title="Terminology">
<t>In this document, the key words &quot;MUST&quot;, &quot;MUST NOT&quot;, &quot;REQUIRED&quot;,
&quot;SHALL&quot;, &quot;SHALL NOT&quot;, &quot;SHOULD&quot;, &quot;SHOULD NOT&quot;, &quot;RECOMMENDED&quot;, &quot;MAY&quot;,
and &quot;OPTIONAL&quot; are to be interpreted as described in BCP 14, [RFC 2119]
and indicate requirement levels for compliant TMesh implementations.
</t>
</section>

<section anchor="notes" title="Notes">
<t>
<list style="symbols">
<t>try to keep soft/hard neighbor lists minimum but reliable, quiesce shrinks size of each</t>
<t>send packet for a mote directly to it, and then fallback to one known neighbor, then to the local leader</t>
<t>any hard knock handshake must also be repeated as a soft knock</t>
<t>lost mode is when all link state is lost or all epochs expired, local leaders must help by sending handshake knocks on a common encoder-defined channel for them to resync
<list style="symbols">
<t>begin listening for any hard knock handshakes, generate link id and sync to it then handshake there</t>
<t>if sleepy, only listen on the lost schedule</t>
<t>local leaders are required to hard knock per epoch on the lost schedule</t>
</list></t>
<t>resource based routing, highest resource gets undelivered packets</t>
<t>highest leader for the whole mesh is responsible for mapping the full mesh, collecting undeliveredâ€™s and re-routing them</t>
<t>natural pooling around local resources, neighborhoods</t>
<t>when you know a link's neighbors you can calculate their knock windows and detect an unused one to transmit in instead of waiting for yours</t>
</list>
</t>
</section>

<section anchor="link-windows" title="Link Windows">
<t>
<list style="symbols">
<t>link ids determine window sequence pattern</t>
<t>step through each bit of the id
<list style="symbols">
<t>derive unique soft/hard knock parameters</t>
<t>derive time until next window (variable)</t>
<t>each pass through the full id is called an <spanx style="verb">epoch</spanx></t>
</list></t>
<t>a confirmed knock over any link is a sync, know the current bit the sender is on for all their links</t>
<t>can use a neighbors window if no soft knock is detected</t>
<t>sleepy motes calculate the epoch peak density across all their neighbors and only wake then
<list style="symbols">
<t>knocks are only tried twice outside of that peak, and once again inside</t>
</list></t>
<t>calculate neighbor windows to detect conflicts and avoid overlapping</t>
</list>
</t>
</section>

<section anchor="flow" title="Flow">
<t>
<list style="numbers">
<t>mote must be initially paired to another
<list style="symbols">
<t>handshakes</t>
<t>z-index priority set</t>
<t>link established</t>
<t>link id created (routing token and z-index byte?)</t>
</list></t>
<t>existing mote informs mesh of new link
<list style="symbols">
<t>sends to mesh leader for overall routing</t>
<t>if link is a neighbor, updates other neighbors</t>
</list></t>
<t>existing mote shares mesh to new mote
<list style="symbols">
<t>sends its neighborhood</t>
<t>sends the mesh top leader list</t>
</list></t>
<t>new mote attempts to reach neighbors to establish links</t>
<t>build/maintain neighborhood list of X soft and Y hard knock</t>
<t>each mote sends its neighborhood to each neighbor after it's changed since the last epoch</t>
<t>a neighbor is only considered lost after it has not responded to a full epoch</t>
</list>
</t>
</section>
</section>

<section anchor="implementation-notes" title="Implementation Notes">
</section>

<section anchor="security-considerations" title="Security Considerations">
</section>

<section anchor="references" title="References">
</section>

</middle>
<back>

<section anchor="examples" title="Examples">
<t>This appendix provides some examples of the tmesh protocol operation.
</t>

<figure align="center"><artwork align="center">
   Request:


   Response:

</artwork></figure>
</section>

</back>
</rfc>
